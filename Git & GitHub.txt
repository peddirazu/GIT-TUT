Git & GitHub

vcs & Git repos
staging area & commits
working with branches
issues and pull requests


git is separate and GitHub separate 
 git is vcs tool (version control system)
	update  the code deploy and redeploy on version based.
revert back the code from the latest version
knowingly and unknowingly  facing the issues

SCM source code management

usage: git [-v | --version] [-h | --help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           [--config-env=<name>=<envvar>] <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone     Clone a repository into a new directory
   init      Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add       Add file contents to the index
   mv        Move or rename a file, a directory, or a symlink
   restore   Restore working tree files
   rm        Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
   bisect    Use binary search to find the commit that introduced a bug
   diff      Show changes between commits, commit and working tree, etc
   grep      Print lines matching a pattern
   log       Show commit logs
   show      Show various types of objects
   status    Show the working tree status

grow, mark and tweak your common history
   branch    List, create, or delete branches
   commit    Record changes to the repository
   merge     Join two or more development histories together
   rebase    Reapply commits on top of another base tip
   reset     Reset current HEAD to the specified state
   switch    Switch branches
   tag       Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch     Download objects and refs from another repository
   pull      Fetch from and integrate with another repository or a local branch
   push      Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
See 'git help git' for an overview of the system.

 
Git Concepts 

remote repository :- Is nothing but the folder of the your code (we use push)
local repository :- local saved code location (use commit)

stating Area
Working Directory :- current working directory 

GitHub:-  one example of remote repositories hosting services 

1) command :- git on cmd

mkdir git-learn
cd git-learn
git init   ---intial of the folder as the git directory 
git status -- check the local status 
vi example.txt
 "update data"
git status  -- shows untrac data

vi test2.py 
git status
 git status
On branch master

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        example.txt
        test.py
	code.txt
nothing added to commit but untracked files present (use "git add" to track)


form staging area to local repo we can't send single file will sent group files only but working directory to staging are we can sent single files 

Working directory --(add)--staging area ---(commit)--local 


Working directory :- Its normal directory and currently working files saved and not related to any git as of now. We can check the files using the "git status" command

Staging area :- Its is the starting stage of git and To add the files in this area we will use the "add" command (git add).Here you can add the files one by one or all files at a time from the working directory area.

Local repository:- This repository for the code/file form the staging area we can commit the files to local repository by using the commit command (git commit). we can add the description here while commit the code by using -m option (git commit -m "comment").we don't have option to commit single file here


to add remote git repository this is the command
git remote add origin https://github.com/peddirazu/GIT-TUT.git
to push your local repo code to remote repository use below command
git push -u origin master
git push -u origin <branch name>


branches 

Main/master have code  so we will do deploy/redeploy

if project have 10 features 

each member are working one one feature so every one create separate branch and work on there feature  


PR- request (pull request) if its approved they your merge they you deploy from only on master branch 

checkout is the option for change the branch 
checkout -b for create new branch


$ git status
On branch copy1
Untracked files:
  (use "git add <file>..." to include in what will be committed)
        example1.text

nothing added to commit but untracked files present (use "git add" to track)

pp3760@INBLR2720 MINGW64 ~/git-learn (copy1)
$ git add example1.text
warning: in the working copy of 'example1.text', LF will be replaced by CRLF the next time Git touches it

pp3760@INBLR2720 MINGW64 ~/git-learn (copy1)
$ git commit -m "latest file added"
[copy1 edfdafd] latest file added
 1 file changed, 1 insertion(+)
 create mode 100644 example1.text

pp3760@INBLR2720 MINGW64 ~/git-learn (copy1)
$ git status
On branch copy1
nothing to commit, working tree clean

pp3760@INBLR2720 MINGW64 ~/git-learn (copy1)
$ git push
fatal: The current branch copy1 has no upstream branch.
To push the current branch and set the remote as upstream, use

    git push --set-upstream origin copy1

To have this happen automatically for branches without a tracking
upstream, see 'push.autoSetupRemote' in 'git help config'.


pp3760@INBLR2720 MINGW64 ~/git-learn (copy1)
$ git push --set-upstream origin copy1
Enumerating objects: 4, done.
Counting objects: 100% (4/4), done.
Delta compression using up to 12 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 325 bytes | 325.00 KiB/s, done.
Total 3 (delta 1), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (1/1), completed with 1 local object.
remote:
remote: Create a pull request for 'copy1' on GitHub by visiting:
remote:      https://github.com/peddirazu/GIT-TUT/pull/new/copy1
remote:
To https://github.com/peddirazu/GIT-TUT.git
 * [new branch]      copy1 -> copy1
branch 'copy1' set up to track 'origin/copy1'.

pp3760@INBLR2720 MINGW64 ~/git-learn (copy1)
$




  
































